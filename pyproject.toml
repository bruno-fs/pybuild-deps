[tool.poetry]
name = "pybuild-deps"
version = "0.3.0"
description = "A simple tool for detection of PEP-517 build dependencies."
authors = ["Bruno Ciconelle <bciconel@redhat.com>"]
license = "GPL-3.0"
readme = "README.md"
homepage = "https://github.com/bruno-fs/pybuild-deps"
repository = "https://github.com/bruno-fs/pybuild-deps"
documentation = "https://pybuild-deps.readthedocs.io"
classifiers = ["Development Status :: 3 - Alpha"]

[tool.poetry.urls]
Changelog = "https://github.com/bruno-fs/pybuild-deps/releases"

[tool.poetry.dependencies]
python = "^3.8"
click = "^8.0.1"
tomli = { version = "*", python = "<3.11" }
xdg = "^6.0.0"
requests = "^2.32.3"
pip-tools = "^7.0.0"

[tool.poetry.group.dev.dependencies]
Pygments = ">=2.10.0"
black = ">=21"
coverage = { extras = ["toml"], version = ">=6.2" }
darglint = ">=1.8.1"
flake8 = ">=4.0.1"
furo = ">=2021.11.12"
ipykernel = "^6.25.2"
myst-parser = { version = ">=0.16.1" }
pre-commit = ">=2.16.0"
pre-commit-hooks = ">=4.1.0"
pydoclint = "^0.4.1"
pytest = ">=6.2.5"
pytest-mock = "^3.10.0"
ruff = ">=0.4.6"
safety = ">=1.10.3"
sphinx = ">=4.3.2"
sphinx-autobuild = ">=2021.3.14"
sphinx-click = ">=3.0.2"
xdoctest = { extras = ["colors"], version = ">=0.15.10" }

[tool.poetry.scripts]
pybuild-deps = "pybuild_deps.__main__:cli"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["pybuild_deps", "tests"]

[tool.coverage.report]
show_missing = true
fail_under = 100
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
]

[tool.ruff.lint.isort]
force-single-line = false
lines-after-imports = 2

[tool.ruff]
src = ["src", "tests"]

[tool.ruff.lint]
extend-select = [
    "B",   # flake8-bugbear
    "C90", # mccabe
    "D",   # pydocstyle
    "E",   # pycodestyle
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "PGH", # pygrep-hooks
    "Q",   # flake8-quotes
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "UP",  # pyupgrade
    "W",   # pycodestyle
]
# ignore checks that conflict with ruff formatter (https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules)
extend-ignore = [
    "COM812",
    "COM819",
    "D105",
    "D107",
    "D107", # undocumented-public-init conflicts with DOC301
    "D203",
    "D206",
    "D212",
    "D300",
    "E111",
    "E114",
    "E117",
    "ISC001",
    "ISC002",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "W191",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"*/test_*.py" = ["S101"]
"noxfile.py" = ["S101"]
"**/conftest.py" = ["S101"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pydoclint]
style = 'google'
exclude = '\.git|\.nox'
arg-type-hints-in-docstring = false

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
